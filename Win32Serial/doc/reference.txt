Windows COMM API wrapper
========================
Ross Berteig <ross@cheshireeng.com>
v0.0.2, July 2008

Preface 
------- 
This is a low-level wrapping of the Windows (specifically Win32)
Communications Port API. The goal is to provide access to
communications resources from scripting environments. The only
targeted scripting environment is Lua (http://www.lua.org/[]), but
since SWIG (http://www.swig.org/[]) is used to construct the wrapper,
support for other scripting languages is possible with only moderate
effort.

This effort was inspired by the desire of the Lua scripting for
Windows project to have a usable serial port wrapper.

Module Functions and Methods 
----------------------------
The following sections sketch out what functions are specifically
provided by this wrapper. For actual documentation of the API
functions, the official Windows Platform SDK documentation
should be consulted.

Comm Structures and Types
~~~~~~~~~~~~~~~~~~~~~~~~~
The Comm API needs support for COMMCONFIG, DCB, and COMMTIMEOUTS
structures. Additionally, there are times when it is handy to have
convenient support for references to int and DWORD values. These
structures (and pointers to them) are provided along with constructors
for each.

+win32ser.new_COMMCONFIG(nProviderBytes)+

Construct and return a Windows COMMCONFIG structure, with room for
_nProviderBytes_ additional provider-specific information. The return
value is either a COMMCONFIG in a userdata or nil if an error
occurred. In case of error, use +win32ser.GetLastError()+ to get the
Windows error code, and +win32ser.ErrorMessage()+ to translate it to
text.

The returned userdata simulates a table with keys for each named
member of the structure.


+win32ser.new_DCB()+

Construct and return a Windows DCB structure.

The returned userdata simulates a table with keys for each named
member of the structure.

+win32ser.new_COMMPROP(extra)+

Construct and return a Windows COMMPROP structure, with room for
_extra_ additional provider-specific information. The return value is
either a COMMPROP in a userdata or nil if an error occurred. In case
of error, use +win32ser.GetLastError()+ to get the Windows error code,
and +win32ser.ErrorMessage()+ to translate it to text.

The returned userdata simulates a table with keys for each named
member of the structure.


+win32ser.new_COMMTIMEOUTS()+

Construct and return a Windows COMMTIMEOUTS structure.

The returned userdata simulates a table with keys for each named
member of the structure.


+win32ser.new_COMSTAT()+

Construct and return a Windows COMSTAT structure.

The returned userdata simulates a table with keys for each named
member of the structure.

+win32ser.intp()+

Construct and return an object that can be used as an integer passed
by reference.

+intp:assign(n)+

Set the current value held by the intp object to _n_. 

+intp:value()+

Discover the current value held by the intp object. 


+win32ser.dwordp()+

Construct and return an object that can be used as a DWORD passed
by reference.

+dwordp:assign(n)+

Set the current value held by the dwordp object to _n_. 

+dwordp:value()+

Discover the current value held by the dwordp object. 



Comm Configuration
~~~~~~~~~~~~~~~~~~
The following functions provide facets of user interaction with serial
port configuration through DCB structures. Access is provided to the
default DCB for a port. Also a means is provided to translate a simple
string description of a port's configuration ("9600,n,8,1") and to
present a dialog box for the user to specify the configuration.

Several of these functions have been simplified from the raw Windows
API. In particular, +win32ser.CommConfigDialog()+ assumes that the
Windows API GetForegroundWindow() will supply a sensible HWND, and
+win32ser.BuildCommDCB()+ returns a new DCB object rather than
requiring that an existing one be supplied by the caller.

+win32ser.CommConfigDialog(port, CC)+

Display the driver's configuration dialog for the device named by
_port_, initially displaying the configuration specified in the
COMMCONFIG object CC. If the user clicked Ok, CC is updated to reflect
any changes made by the user.

Get a suitable COMMCONFIG object from +win32ser.new_COMMCONFIG()+.

The return value is true on success, or false on error.

+win32ser.GetDefaultCommConfig(name, CC)+

Fill the COMMCONFIG object CC with the default configuration of the
device named by _port_.

Get a suitable COMMCONFIG object from +win32ser.new_COMMCONFIG()+.

The return value is true on success, or false on error.

+win32ser.SetDefaultCommConfig(port, CC)+

the default configuration of the device named by _port_ from the
settings in the COMMCONFIG object CC.

Get a suitable COMMCONFIG object from +win32ser.new_COMMCONFIG()+.

The return value is true on success, or false on error.

+win32ser.BuildCommDCB(mode)+

Create a new DCB object and initialize it from the string _mode_.

The new DCB is returned on success, or nil on error.

+win32ser.BuildCommDCBAndTimeouts(mode, dcb, CTO)+

Initialize a DCB object _dcb_ and COMMTIMEOUTS object _CTO_ from the
string _mode_.

Get a suitable DCB object from +win32ser.new_DCB()+ or
+win32ser.BuildCommDCB()+.

Get a suitable COMMTIMEOUTS object from +win32ser.new_COMMTIMEOUTS()+.

The return value is true on success, or false on error.

File Handles
~~~~~~~~~~~~
The COMM API requires that a specific combination of options be
provided when opening a Windows HANDLE on the port. Since the standard
io.open() function doesn't precisely map to those options, and since C
stdio style buffered file handles are not really preferred for
interaction with a communications channel, an HPORT class is defined
containing a Windows HANDLE. An HPORT can be created in a closed state
by calling HPORT() or in an open state by calling
+win32ser.HPORT(name)+. The HPORT class implements methods Open(),
Close(), Read(), and Write(), along with methods for all of the
Windows Comm API functions that require an open HANDLE on a
communications device.

Also, the following functions are provided that explicitly use Windows
HANDLEs. OpenPort() is implemented with CreateFileA(), passing the
required modes and flags, but returning NULL in place of
INVALID_HANDLE_VALUE on failure. ClosePort() is essentially just
CloseHandle(). ReadPort() and WritePort() implement unbuffered reads
and writes on the HANDLE. These functions are used to implement the
corresponding methods of the HPORT class.

+win32ser.OpenPort(name)+

Open a Windows HANDLE suitable for use with the Comm API on the
communications device identified by _name_.

Returns a valid HANDLE, or nil.

+win32ser.ClosePort(h)+

Close the Windows HANDLE _h_.

Returns true on success, or false on error.

+win32ser.ReadPort(h, len)+

Read up to _len_ bytes from the open port _h_. Returns a string
containing at most _len_ characters (which may contain any 8-bit
characters including NUL) or nil on error. If no characters were
available and the port is configured to time out, then the return
value may be an empty string which should not be confused with
returning nil.

+win32ser.WritePort(h, buffer, wrote)+

Write bytes from the string _buffer_ (which may contain any 8-bit
characters including NUL) to the open port _h_. The number of bytes
actually written is set in the parameter _wrote_ which should be an
intp object.

Get a suitable intp object from +win32ser.intp()+, and discover the
number of bytes written as +wrote:value()+.

Returns true on success, or false on error.


HPORT class Methods
~~~~~~~~~~~~~~~~~~~ 
The balance of the COMM API requires an open file handle to the port
to be manipulated. Get a suitable handle from the HPORT() function
with or without a port name as its argument as described in the
previous section.

These functions mostly provide support for configuring the hardware,
and as such would normally be used once at the beginning of an
application. Some query the status, or provide access to the hardware
handshake signals and could be useful while actively communicating
over an open port.

+win32ser.HPORT()+

Create and return an HPORT object that is not currently open on any
port.

+win32ser.HPORT(name)+

Create and return an HPORT object that is open on the port identified
by the string _name_.

+HPORT:ClearCommBreak()+

Clear the BREAK condition on the port.

+HPORT:ClearCommError(dwordp,COMSTAT)+

Clear any errors on the device, keeping track of them in the dwordp
object and filling the COMSTAT object with status information from the
driver.

+HPORT:EscapeCommFunction(code)+

Execute one of several special operations identified by _code_.

+HPORT:GetCommConfig(COMMCONFIG,dwordp)+

Get the current device configuration into the COMMCONFIG object. No
more than the value of the dwordp bytes will be modified, and the
actual number modified will be set into the dwordp.

+HPORT:GetCommMask(dwordp)+

Put the current event mask into _dwordp_.

+HPORT:GetCommModemStatus(dwordp)+

Put the current modem status into _dwordp_.

+HPORT:GetCommProperties(COMMPROP)+

Fill a COMMPROP object with information from the device driver about
the capabilities of the open communications port.

Get a suitable COMMPROP object from +win32ser.new_COMMPROP()+

+HPORT:GetCommState(DCB)+

Fill a DCB object with the port's current state. 

+HPORT:GetCommTimeouts(COMMTIMEOUTS)+

Fill a COMMTIMEOUTS object with the port's current timeout
configuration.

+HPORT:PurgeComm(flags)+

Purge the port's buffers and pending I/O requests according to the
value _flags_.

+HPORT:SetCommBreak()+

Set the BREAK condition on the port.

+HPORT:SetCommConfig(COMMCONFIG,DWORD)+

Set the current device configuration from the COMMCONFIG object. No
more than _DWORD_ bytes will be read from the COMMCONFIG object.

+HPORT:SetCommMask(DWORD)+

Set the port's event mask to _DWORD_.

+HPORT:SetCommState(DCB)+

Set the port's state from the DCB object. 

+HPORT:SetCommTimeouts(COMMTIMEOUTS)+

Set the port's timeout configuration from _COMMTIMEOUTS_.

+HPORT:SetupComm(dwIn,dwOut)+

Suggest to the port's driver that suitable sizes for the driver's
internal buffers would be _dwIn_ for the input buffer and _dwOut_ for
the output buffer.

Note that the driver is not obligated to pay attention to this hint,
and for those drivers that can adjust their buffer sizes, this must
occur after the port is open and before any actual I/O is performed.

+HPORT:TransmitCommChar(ch)+

Transmit an out of band character on the port, specified by the first
character of the string _ch_. The character will be dropped at the
head of the output FIFO.

+HPORT:Read(len)+

Read up to _len_ bytes from the port. Returns the bytes received in a
string on success or nil on error.

Note that the returned string may have length zero if no bytes are
available within the read timeout configured, or any length up to
_len_ if bytes are or become available before the timeout expires.

+HPORT:Write(buffer, intp)+

Write the bytes from the string _buffer_ to the port, filling the
value of the intp object with the number of bytes actually sent before
the write timeout configured on the port expires.

Windows Error Codes
~~~~~~~~~~~~~~~~~~~
The following functions provide access to the Windows error code, and
a simple translation of a system error code to text in some default
language. SetLastError() is provided primarily to permit testing of
GetLastError(), but might conceivably have some utility in a higher
level module.

Windows error codes are 32-bit unsigned values, many of which can be
found listed in the file +winerror.h+ provided in the Windows Platform
SDK. At a command prompt, the command +NET HELPMSG _error_+ will look
up the error code _error_ and display a description if one is
available. Unfortunately, there is no single, reliable source of
descriptions of all error codes that might be found in the wild. Since
any DLL or executable can contain a message resource, there are some
errors (even for system components) that are not described in the
common message table that is accessible to all applications. There is
also a range of error codes that is explicitly set aside for
application-specific use.

+win32ser.GetLastError()+

Get the most recently set Windows error code for the current process
and thread.

+win32ser.SetLastError(err)+

Set the Windows error code for the current process
and thread to _err_.

+win32ser.ErrorMessage(err)+

Look up the error code _err_ in the system message table, in a default
language using the Windows FormatMessage() function and return the
resulting description string, if any.

Message boxes, beeps, and window handles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Because they might be useful in some real programs, wrappers are
provided for MessageBeep() and MessageBox(). To make use of
MessageBox() plausible, constant definitions are provided for
constructing the value to pass in the uType parameter, and for
interpreting the return value.

These functions can be used to make noises and display simple
messages. Since MessageBox() returns a code identifying which button
was pushed, it can even be used to prompt the user in simple ways.

NOTE: Real user interfaces should actually be built from an interface
toolkit such as IUP or wxLua, not just as a sequence of message boxes.

+win32ser.MessageBeep(uType)+

Make the sound associated with the type code _uType_. The _uType_
value should be one of the Icon constants. 

+win32ser.MessageBox(text, caption, uType)+

Display a Windows message box with the specified _text_ and _caption_,
where the icon and specific buttons to include are specified by the
type code _uType_. The _uType_ value should include one Icon constant
added to at most one button constant and one default button constant.

Returns a value indicating which button was clicked by the user, which
should be one of the button ID constants.

The message box type and return value constants defined include:

.Icon to show and sound to play:
+win32ser.MB_ICONASTERISK+, +win32ser.MB_ICONERROR+,
+win32ser.MB_ICONEXCLAMATION+, +win32ser.MB_ICONHAND+,
+win32ser.MB_ICONINFORMATION+, +win32ser.MB_ICONSTOP+,
+win32ser.MB_ICONWARNING+ 

.Buttons to show:
+win32ser.MB_ABORTRETRYIGNORE+, +win32ser.MB_CANCELTRYCONTINUE+,
+win32ser.MB_OK+, +win32ser.MB_OKCANCEL+, +win32ser.MB_RETRYCANCEL+,
+win32ser.MB_YESNO+, +win32ser.MB_YESNOCANCEL+ 

.Default button:
+win32ser.MB_DEFBUTTON1+, +win32ser.MB_DEFBUTTON2+,
+win32ser.MB_DEFBUTTON3+, +win32ser.MB_DEFBUTTON4+

.Return values:
+win32ser.IDOK+, +win32ser.IDCANCEL+, +win32ser.IDABORT+,
+win32ser.IDRETRY+, +win32ser.IDIGNORE+, +win32ser.IDYES+,
+win32ser.IDNO+, +win32ser.IDCLOSE+, +win32ser.IDHELP+,
+win32ser.IDTRYAGAIN+, +win32ser.IDCONTINUE+

The following code fragment demonstrates use of these functions to
make noise, display messages, and collect feedback.

[lua]
source~~~~
require"win32ser"
b = win32ser.MessageBeep(0)            -- Make a default noise
b = win32ser.MessageBeep(win32ser.MB_ICONERROR) -- Make the Error noise.

-- show a simple warning message with only an Ok button
button = win32ser.MessageBox(
	"This is a warning.", 
	"Box Caption",
	win32ser.MB_ICONWARNING + win32ser.MB_OK)
assert(button == win32ser.MB_OK)

-- ask a yes/no question showing Yes and No buttons
button = win32ser.MessageBox(
	"Want to answer a question?", 
	"Box Caption",
	win32ser.MB_ICONINFORMATION + win32ser.MB_YESNO)
assert(button == win32ser.MB_YES or button == win32ser.MB_NO)
source~~~~

Usage notes
-----------

Mode Strings
~~~~~~~~~~~~
The BuildCommDCB* functions take strings following the syntax of the
MODE command.  These are documented by MODE /? and in documentation
for the CMD.EXE command shell online at

http://technet.microsoft.com/en-us/library/bb490932(TechNet.10).aspx[]

They also understand the older and simpler syntax inherited from
MSDOS's MODE command as well. For example, "9600,N,8,1" in the old
notation is equivalent to "baud=9600 parity=none data=8 stop=1" in the
new notation.

Note that the new notation requires that the parameters baud, parity,
data, and stop must be specified by the string.


On Port Timeouts
~~~~~~~~~~~~~~~~ 
Read and write operations on a port can be configured to complete
before the buffer is filled (reads) or sent (writes) through the
COMMTIMEOUTS structure. Since this configuration can be part of a
port's default configuration, you cannot count on the timeouts having
the desired configuration if any other applications might have been
using the COM port. While this is true for most COM port settings, the
timeout settings are particularly easy to ignore and can cause
confusing behavior if they are not as expected.

The correct configuration of timeout values for a port is poorly
documented by Microsoft. For clear cases such as no timeout at all,
the operation is relatively self-explanatory. For example, set all the
timeout fields to 0 to cause all reads and writes to block until the
exact byte counts are satisfied. This case is demonstrated by the
following fragment:

[lua]
source~~~~
-- set a port for fully-blocking reads and writes.
require "win32ser"

function SetBlockingRW(h)
    lpct = win32ser.new_COMMTIMEOUTS()
    lpct.WriteTotalTimeoutMultiplier = 0
    lpct.WriteTotalTimeoutConstant = 0
    lpct.ReadTotalTimeoutMultiplier = 0
    lpct.ReadTotalTimeoutConstant = 0
    lpct.ReadIntervalTimeout = 0
    win32ser.SetCommTimeouts(hp, lpct)
end

h = win32ser.Open("COM1")
SetBlockingRW(h)
buffer = CreateSomeHugeBuffer()
win32ser.WritePort(h, buffer)
win32ser.Close(h)
source~~~~

In general, read timeouts can be specified with a time to allow per
character, a time to allow between characters, and an additional
time to allow for each read request. If the number of bytes requested
in a ReadPort() call is satisfied before the timeout happens, then the
full buffer is returned.

However, the situation is more complicated if enough characters aren't
available when the read request is made. When the request is first
issued, the number of bytes is multiplied by the
ReadTotalTimeoutMultiplier and added to ReadTotalTimeoutConstant, and
if the result is non-zero it specifies the maximum number of
milliseconds to wait before the read request is completed with a
partial buffer. The field ReadIntervalTimeout specifies a time to wait
between received characters that if exceeded also causes the read
request to terminate early. There is an implication in the
documentation that the interval timer does not start until after the
first character is received.

In many cases, it is possible to pick these values so that reads
generally return data in usefully sized chunks, but don't block the
caller for too long.

However, it is often desirable to have read requests return
immediately with an empty buffer when no data is available. If this
can be done, then a single thread can handle concurrent data flows in
both directions on multiple serial ports; e.g. a terminal emulator can
be written as a single-threaded program.

For non-blocking reads, the documentation suggests two possible
timeout specifications that are both described as returning an empty
buffer when no bytes are available. Both specify setting
ReadIntervalTimeout to MAXDWORD, and they vary in the handling of the
other two read timeout fields. The first specifies that
ReadTotalTimeoutMultiplier and ReadTotalTimeoutConstant both be set
to zero. The second specifies that ReadTotalTimeoutMultiplier be set
to MAXDWORD and ReadTotalTimeoutConstant be non-zero.

When handling continuous data flows in the stead state, both appear to
have the desired effect: reads return characters as and when they
become available. However, when data flow pauses, they appear to
differ in how the last few characters that are sitting in the UART's
receive FIFO are handled. 

In the first setup, some small but unpredictable number of characters
remain in the input FIFO, and they are only actually delivered in a
buffer after a new character arrives at the serial port. However, when
no new characters have arrived, it does not block the calling thread
at all. 

The second configuration does not have this problem, but it does block
the calling thread for the (non-zero) number of milliseconds
specified by ReadTotalTimeoutConstant when no characters are
available. 

This difference is demonstrated by reading a quiet serial port in a
tight loop and noticing that when read timeouts are set in the first
configuration, the CPU will show as 100% used as compared to the
second configuration where it will barely be used at all.

This code fragment shows setting read timeouts up for the second
non-blocking read configuration, following the second configuration:

[lua]
source~~~~
-- set a port for non-blocking reads
require "win32ser"

function SetNonBlockingR(h)
    lpct = win32ser.new_COMMTIMEOUTS()
    win32ser.GetCommTimeouts(hp, lpct)
    lpct.ReadTotalTimeoutMultiplier = MAXDWORD
    lpct.ReadTotalTimeoutConstant = 1
    lpct.ReadIntervalTimeout = MAXDWORD
    win32ser.SetCommTimeouts(hp, lpct)
end

h = win32ser.Open("COM1")
SetNonBlockingR(h)
while true do
    buffer = win32ser.ReadPort(h, 16)
    if (buffer ~= nil and #buffer > 0) then
	io.write(string.format("got %d bytes: %q\n", #buffer, buffer)
	if buffer:match"Q" then break end
    end
end
win32ser.Close(h)
source~~~~


Write timeouts are are defined by two fields of the COMMTIMEOUTS
structure: WriteTotalTimeoutMultiplier and WriteTotalTimeoutConstant.
The field WriteTotalTimeoutMultiplier is the number of milliseconds to
allow per character requested, and WriteTotalTimeoutConstant is the
number of additional milliseconds to wait. 

Note that at 9600 baud, 8 bits, and no parity, a single character time
is 0.960 ms. Since baud rates up to 115200 are supported by common
UARTs (and have been since well before Windows 3.0 shipped) this
choice of time units is not as useful as it sounds at a glance.

If write timeouts are desirable (which could be sensible in a
flow-controlled configuration), then something like the following
fragment will set them to a minimum of 1 ms per character plus some
overhead:

[lua]
source~~~~
require "win32ser"

-- timeout writes after calculated time per byte (based on baud rate)
-- plus a 10ms margin.
function SetTimedWrite(baud)
    local wttm = math.ceil(0.5 + 10*1000 / baud )
    lpct = win32ser.new_COMMTIMEOUTS()
    win32ser.GetCommTimeouts(hp, lpct)
    lpct.WriteTotalTimeoutMultiplier = wttm,
    lpct.WriteTotalTimeoutConstant = 10,
end

source~~~~

Sample Code
-----------

+samples/nbread.lua+
~~~~~~~~~~~~~~~~~~~~
This code demonstrates non-blocking reads. It assumes that a source of
characters at a 9600 baud, 8-bit, no parity is connected to COM2 that
can send a 'Q' character at will. It loops, reading from the port,
keeping some counts, and writing to both the console and back to the
port.

[lua]
source~~~~
include::../samples/nbread.lua[]
source~~~~

+samples/loopback.lua+
~~~~~~~~~~~~~~~~~~~~~~
This code assumes that COM1 and COM2 are connected by a null-modem
cable. It doesn't use hardware handshakes so only Tx, Rx, and GND need
be wired. However, if DTR and DSR are also wired, then it demonstrates
that changing DTR on one port can be sensed with DSR on the other
port. 

[lua]
source~~~~
include::../samples/loopback.lua[]
source~~~~

+samples/msg.lua+
~~~~~~~~~~~~~~~~~
This code demonstrates the use of MessageBox().

[lua]
source~~~~
include::../samples/msg.lua[]
source~~~~


+samples/props.lua+
~~~~~~~~~~~~~~~~~~~
This code demonstrates the values returned from GetCommProps().

[lua]
source~~~~
include::../samples/props.lua[]
source~~~~

+samples/demodcb.lua+
~~~~~~~~~~~~~~~~~~~~~
This code demonstrates building DCB and COMMTIMEOUTS structures from
mode strings. 

[lua]
source~~~~
include::../samples/demodcb.lua[]
source~~~~

+samples/configdlg.lua+
~~~~~~~~~~~~~~~~~~~~~~~
This code demonstrates how to use the +CommConfigDialog()+ function.

[lua]
source~~~~
include::../samples/configdlg.lua[]
source~~~~


Building the Module
-------------------
The Windows COMM API wrapper was built under Cygwin using GCC and
SWIG. Unzip the source archive into a suitable folder, then issue the
following commands:

	make
	make tests
	make docs

The documentation is built in the +doc+ folder, and two versions of the
Lua module DLL are found in the +serial-msvcrt+ and +serial-msvc80+
folders, each linked against the corresponding C runtime DLL. The
other interesting folders include +t+ which contains the test cases
and +samples+ which contains sample code.

The command

	make ship

may be used to build and package the released ZIP files.


Development Tools
~~~~~~~~~~~~~~~~~
The following tools have been used for development.

* Cygwin with developer tools
  - GCC
  - SWIG
  - make
  - zip
* Lua
  - luaunit module
* asciidoc from a Cygwin package
  - DocBook from a Cygwin package
  - FOP from Apache using JRE1.6 from Sun
  - source-highlight from GnuWin32

Asciidoc
^^^^^^^^
This documentation has been prepared with asciidoc, and specifically
with the a2x driver script that combines asciidoc with the DocBook XSL
templates to produce XSL-FO for processing with Apache FOP to get
Adobe PDF. This is another in a series of experiments to find a
documentation toolchain that is both compatible with a development
environment including CVS and which can produce quality final output.
Asciidoc has the interesting property that its markup language is
extremely lightweight for normal text, and yet it provides access to
most of the power of a full typesetting toolchain based on the DocBook
standards.

Use of the Lua source filter (or any language source filter, for that
matter) requires that Gnu source-highlight be installed. This is not
available as a Cygwin package, so the Windows binary was installed
from the GnuWin32 project. That build has its default data folder
compiled in as +c:/progra~1/Src-Highlite/share/source-highlight/+
which is not friendly on installations that lack a C: drive, and
assumes that the GnuWin32 package was installed in an unusual way.
This was resolved by editing the asciidoc filter configuration file to
add an explicit --data-dir option (naming a Windows path, not a Cygwin
path) to the source-highlight command line.

The asciidoc a2x toolchain driver assumes that FOP is properly
installed and available as fop.sh somewhere on the path. It is also
sensitive to the FOP version installed, and does not work with
versions newer than 0.20.5 or so. This is likely to actually be an
issue with the asciidoc implementation of XSL-FO, and really should be
fixed in asciidoc. The work around is to install an old version of FOP
and live with its idiosyncrasies, which include the need to make sure
JAVA_HOME is defined in the environment before fop.sh is invoked.

SWIG
^^^^
The SWIG Wrapper Generator provides all of the driving logic behind
the construction of the wrapper. It allows a simple list of functions
to wrap to be converted to C code that hides all of the messy details
that glue that code to a hosting script language environment. For most
of its targeted scripting languages, the resulting file can be simply
compiled and linked into a DLL that can be loaded at run time by a
script that wants to use the wrapped capabilities.

Lua
^^^
The Lua language is a nice, powerful, small, and easy to use language that is
generally easily glued to C code that was originally designed to be
called from Lua. However, gluing Lua to an arbitrary API would
ordinarily require a lot of boiler-plate and repetitive code to be
written, and SWIG nicely conceals all that behind its curtains.

Since one significant goal of this wrapper is compatibility with Lua
as released in the Lua Scripting for Windows package, support is in
place in the Makefile for linkage to the matching C run time DLL,
MSVCR80.DLL. This also makes our wrapper compatible with the popular
builds distributed by the LuaBinaries project. Both of these
distributions can be found a http://www.luaforge.net/[].
