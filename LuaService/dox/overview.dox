/*!
\mainpage LuaService Overview

This project provides a framework for building Windows Service applications 
in Lua. A Windows Service is a special application that runs at system boot
(or on demand) without an interactive user. One use case is to run Xavante 
automatically.

This project is hosted at LuaForge (http://www.luaforge.net/) as 
http://luaforge.net/projects/luaservice/ where full source code, 
documentation, a bug tracker, and so forth can be found.

- LuaService is open source and licensed under the MIT license as is Lua 
itself. See \ref license for details. 
- See \ref tools for some notes on the software tools used.
- See \ref flow for discussion of the general event flow in a service.
- See \ref luamodel for discussion of how Lua fits in the framework.
- See \ref lsusage for a description of how to set up a service with LuaService.

*/
/*! \page lsusage Framework Usage

LuaService is a Windows Service applicaiton that hosts a Lua interpreter.

(Future versions may also act as a Windows Service controller, perform
configuration tasks, or even run the service's script interactively to
aid debugging.)

A LuaService must include the files LuaService.exe and init.lua at a bare 
minimum. In addition, it should include a Lua script that implements the 
service (named in init.lua), and may also include any Lua modules (in 
either .lua or .dll files) that are required to run the service script.

Note that the module search paths specified by package.path and package.cpath 
are restricted to the service's folder, so any needed modules should be copied
into that folder in order for require() to locate them when the service starts.

In the current version, the service must be manually installed, configured
and started by another tool. SC.EXE is a generic service configuration and
control utility that may be used for these tasks. The Services snapin for 
the Microsoft Management Console may also be used to start and stop LuaService.

\section uService service Table

Both the init and service scripts have a global table named <code>service</code>
available. That table has the following informational fields:

- <code>service.name</code> The name of the service as specified by init.lua,
defaulting to "LuaService". This name is known to the SCM, and is found in 
the registry. 
- <code>service.filename</code> The fully qualified filename of the service 
program.
- <code>service.path</code> The fully qualified path to the service folder. 
This is just <code>service.filename</code> with LuaService.exe stripped off, 
and can be assumed to end in a literal backslash character.

It also defines the following utility functions:

- <code>service.sleep(ms)</code> Calls Sleep() to make the thread sleep for 
\a ms ms. 

- <code>service.print(...)</code> Like standalone Lua.exe's print(), but
with its output written to OutputDebugString() instead of stdout, and 
without any separator characters between print's arguments. Like the 
stock print(), it passes every argument through the function tostring(). 
For safety since services don't have access to the user, the global function 
print is replaced by a copy of this function.

- <code>service.stopping()</code> Returns true if the SCM has asked that 
this service stop soon. The service's main thread has promised the SCM
that the STOP request will complete within about 25 seconds, so the script
has an obligation to poll this function often enough to be able to stop 
in time.

- <code>service.tracelevel(level)</code> If \a level is not present or is 
nil, returns the current trace level. If \a level is specified, it is 
converted to an integer and sets the current trace level. Level 0 
(the default) keeps the framework quiet. Levels greater than zero add 
additional detail to the trace.

\section uInit Init Script

The init script is executed when LuaService is initially run from its main()
function. Its purpose is to configure the service executable so that it can
find its implementation script.

The Lua state used to load and execute init.lua is abandoned once init.lua 
returns, so nothing this script does has any effect on the service's execution
except its return value.

init.lua should return a table with several named fields.

- <code>tracelevel</code> The framework trace level. Defaults to 0.
- <code>name</code> The service's name. Defaults to "LuaService".
- <code>script</code> The service's implementation script. Defaults to 
"test.lua" in the current release, but that is obviously a bad default 
script name and will change in a future release.

The following fragment is a sample init.lua for an imaginary Ticker 
service:

<pre>
-- init.lua for the Ticker service
return {
    tracelevel = 0,         -- Framework trace level
    name = "TickService",   -- Service name for SCM
    script = "ticker.lua",  -- Script that runs the service
}
</pre>

\section uSvc Service Script

The service implementation script is the whole point of having LuaService.

It is named by the script field of the table returned by init.lua, and must
be found in the service folder. It may require lua modules, as long as those
modules are also found in the service folder.

The following fragment is a sample ticker.lua for an imaginary Ticker 
service:

<pre>
-- ticker.lua
service.print("Ticker service started, named ", service.name)
local i = 0                     -- counter
while true do                   -- loop forever
  service.sleep(5000)           -- sleep 5 seconds
  i = i + 1                     -- count
  print("tick", i)              -- OutputDebugString
  if service.stopping() then    -- Test for STOP request 
    return                      --  " and halt service if requested
  end
end
service.print("Ticker service stopped.")
</pre>

\note Unless an account is specified when the service was installed, this 
script is running in the LocalSystem security context. This is a built-in 
account in Windows that has a high level of access to the local system 
(more than the Administrator account), but has very limited access to 
network resources. As a result, it is a really good idea to keep the 
service's fold on a disk that is physically attached to the system. 
LuaService probably cannot run if the folder is on a network drive.



*/

/*! \page tools Supporting Tools

Most of these tools aren't mandatory (well, aside from a compiler of some
sort that does produce native Win32 binaries without too many wierd DLL 
dependancies), but they make my life easier during lots of development 
projects.

- Eclipse platform and IDE, and especially the Eclipse CDT:
See http://www.eclipse.org, http://www.eclipse.org/cdt

- Eclox, a Doxygen frontend plugin for Eclipse.
Visit http://home.gna.org/eclox/

- Doxygen, a documentation tool for C-like languages.
Found at http://www.doxygen.org/

- Graphviz Dot, a directed acyclic graph visualization tool used by 
Doxygen to draw structure and relationship figures. This is a great 
tool for visualizing arbitrary complex network diagrams since it works
from a natural text format describing the nodes and connecting arcs to 
produce neatly drawn figures. Find it at http://www.graphviz.org/

- MSCGen, a Message Sequence Chart generator that integrates well with
Doxygen. Find it at http://www.mcternan.me.uk/mscgen/ and put it in your 
path so that the \@msc and \@endmsc directives work.

- LuaEclipse, an integrated development environment for the 
Lua programming language. http://luaeclipse.luaforge.net/

- The Lua programming language: http://www.lua.org/

- CVS (http://www.nongnu.org/cvs/) and CVSNT (http://www.cvsnt.org/)
The latter is more useful on Windows machines, but beware of its 
insidiously useful improvements over real CVS, like the cvs ls command
and the cvs status -qq command. Once you get used to status having
the -qq option as a quick and dirty way to find out what is different
in your sandbox, it is really difficult to go back to the real thing.
Eclipse's native CVS browsing helps there, however.

- PuTTY, an SSH implementation for Windows:
http://www.chiark.greenend.org.uk/~sgtatham/putty/

- Diceware at http://www.diceware.org/ for a good treatment of proper pass phrase
generation and management. Look here if you want to be seriously paranoid
about private key safety.

- MinGW, minimalist GNU for Windows: http://www.mingw.org/ 

- MSDN is the source of all knowledge of official Windows API and workings.

- DebugView, ProcessMonitor, and ProcessExplorer are invaluable for finding 
out what is really going on inside a running Windows machine without stepping 
off the deep end of full kernel debuggin. A serious Windows developer must 
have these and often other utilities from Sysinternals, now found at Microsoft:
http://www.microsoft.com/technet/sysinternals/

- SC.EXE, a generic service control utility for developers. This is part of the 
Windows Platform SDK tools, but may be present on modern windows systems. Try a 
command like <code>sc /?</code> to see if you have it installed already. Some 
useful incantations include:
  - <code>sc help</code> Documentation. Also see the technote in MSDN titled 
<b><a href="http://msdn2.microsoft.com/en-us/library/ms810435.aspx" 
target="_top" title="MSDN">Using SC.EXE to Develop Windows NT Services</a></b> 
for hints and tips.
  - <code>sc create LuaService binPath= "c:\full\path\of\LuaService.exe"</code> 
Note the space after "binPath=" and the file name. All of sc create's options have 
that same form, with the option name including the equals character, and using 
the next command line argument as the value. Don't forget to quote the pathname
if it includes any spaces.
  - <code>sc start LuaService</code> Tell the SCM to start the service.
  - <code>sc stop LuaService</code> Tell the SCM to stop the service.

*/

/*! \page license License

Copyright (c) 2007, Ross Berteig and Cheshire Engineering Corp.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
